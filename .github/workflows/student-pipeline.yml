
name: Student CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm globally
        run: npm install -g pnpm

      - name: Install backend dependencies
        run: |
          cd server
          pnpm install --frozen-lockfile

      - name: Lint backend
        run: |
          cd server
          pnpm run lint

      - name: Run backend tests
        run: |
          cd server
          pnpm test
        env:
          CI: true
          MONGODB_URI: mongodb://localhost:27017/test
          JWT_SECRET: test_secret

      - name: Build backend
        run: |
          cd server
          pnpm run build

  frontend:
    runs-on: ubuntu-latest
    needs: backend
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install pnpm globally
        run: npm install -g pnpm

      - name: Install frontend dependencies
        run: |
          cd client
          pnpm install --frozen-lockfile

      - name: Lint frontend
        run: |
          cd client
          pnpm run lint

      - name: Run frontend tests
        run: |
          cd client
          pnpm test
        env:
          CI: true

      - name: Build frontend
        run: |
          cd client
          pnpm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: client/dist

  deploy-backend:
    runs-on: ubuntu-latest
    needs: backend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Deploy to Render
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.RENDER_SERVICE_ID }}
          api-key: ${{ secrets.RENDER_API_KEY }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: frontend
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: client/dist

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./client
          vercel-args: '--prod'

  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    steps:
      - name: Check backend health
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.BACKEND_URL }}/api/health
          max-attempts: 3
          retry-delay: 5s

      - name: Check frontend health
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ secrets.FRONTEND_URL }}
          max-attempts: 3
          retry-delay: 5s
